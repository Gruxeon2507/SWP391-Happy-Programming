/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.eikh.happyprogramming.controller;

import com.eikh.happyprogramming.configuration.JwtTokenFilter;
import com.eikh.happyprogramming.model.Comment;
import com.eikh.happyprogramming.model.User;
import com.eikh.happyprogramming.repository.CommentRepository;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import com.eikh.happyprogramming.repository.UserRepository;
import com.eikh.happyprogramming.utils.JwtTokenUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;

/**
 * @author huyen
 */
@RestController
@CrossOrigin("*")
@RequestMapping("/api/comments")
public class CommentController {
    @Autowired
    UserRepository userRepository;
    @Autowired
    JwtTokenFilter jwtTokenFilter;

    @Autowired
    JwtTokenUtil jwtTokenUtil;
    @Autowired
    CommentRepository commentRepository;

    @GetMapping("/all")
    public List<Comment> getAllComment() {
        return commentRepository.findAll();
    }

    @PostMapping("/add/reply/{parentId}")
    public void addReply(@RequestBody Comment comment, @PathVariable("parentId") int parentId, HttpServletRequest request) {
        System.out.println("API ADD REPLY CALLED AT " + new Date() + ".");
        /**
         * comment received has the following attributes: content, post, parent
         * lacking: id (autogenerated), commentedAt, user (HttpRequest),
         */
        java.util.Date now = new java.util.Date();
        comment.setCommentedAt(new Timestamp(System.currentTimeMillis()));
        String username = jwtTokenUtil.getUsernameFromToken(jwtTokenFilter.getJwtFromRequest(request));
        User u = new User();
        u.setUsername(username);
        comment.setUser(u);
        Comment parent = new Comment();
        parent.setCommentId(parentId);
        comment.setParent(parent);
        commentRepository.save(comment);
    }

    @PostMapping("add/top")
    public void addTopLevelComment(@RequestBody Comment comment, HttpServletRequest request) {
        System.out.println("API ADD TOP LEVEL COMMENT CALLED AT " + new Date() + ".");
        /**
         * comment received has the following attributes: content, post, parent
         * lacking: id (autogenerated), commentedAt, user (HttpRequest),
         */
        java.util.Date now = new java.util.Date();
        comment.setCommentedAt(new Timestamp(System.currentTimeMillis()));
        String username = jwtTokenUtil.getUsernameFromToken(jwtTokenFilter.getJwtFromRequest(request));
        User u = new User();
        u.setUsername(username);
        comment.setUser(u);
        commentRepository.save(comment);
    }

    public void deleteCommentAndReplies(int commentId) {
        System.out.println("DELETE COMMENT API CALLED.");
        Comment comment = commentRepository.findById(commentId).get();
        if (comment != null) {
            for (Comment reply : comment.getReplies()) {
                deleteCommentAndReplies(reply.getCommentId());
            }
            commentRepository.deleteById(commentId);
        }

    }

    @DeleteMapping("delete/{commentId}")
    public void deleteCommentById(@PathVariable("commentId") int commentId, HttpServletRequest request) {
        try {

            String username = jwtTokenUtil.getUsernameFromToken(jwtTokenFilter.getJwtFromRequest(request));
            User requestFrom = userRepository.findByUsername(username);
            if (requestFrom != null) {
                // check if the requestFrom is post owner, comment owner or admin
                Comment comment = commentRepository.findById(commentId).get();
                if (comment != null) {
                    String commentOwnerUsername = comment.getUser().getUsername();
                    String postOwnerUsername = comment.getPost().getUser().getUsername();
                    User adminUser = userRepository.userHasRole(username, 1);
                    if (username.equals(commentOwnerUsername)
                            || username.equals(postOwnerUsername)
                            || adminUser != null
                    ) {
                        deleteCommentAndReplies(commentId);
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("FAIL TO DELETE COMMENT.\nEXCEPTION: " + e.getMessage() + "\nCAUSE: " + e.getCause());
        }
    }

    @PostMapping("/edit/{commentId}")
    public void updateComment(@PathVariable("commentId") int commentId, @RequestBody Comment newComment, HttpServletRequest request) {
        System.out.println("EDIT COMMENT API CALLED AT " + new Date() + ".");
        try {

            String username = jwtTokenUtil.getUsernameFromToken(jwtTokenFilter.getJwtFromRequest(request));
            Comment comment = commentRepository.findById(commentId).get();
            if (comment != null) {
                String commentOwnerUsername = comment.getUser().getUsername();
                if (username.equals(commentOwnerUsername)) {
                    commentRepository.updateComment(commentId, newComment.getCommentContent());
                }
            }
        } catch (Exception e) {
            System.out.println("FAIL TO UPDATE COMMENT.\nEXCEPTION: " + e.getMessage() + "\nCAUSE: " + e.getCause());
        }
    }

    @GetMapping("/view/top/{postId}")
    public List<Comment> getTopLevelCommentsByCourse(@PathVariable("postId") int postId) {
        List<Comment> cmts = commentRepository.getTopLevelCommentByPost(1);
        System.out.println("THERE ARE " + cmts.size() + " TOP LEVEL COMMENTS IN POST " + postId);
        for (Comment c : cmts) {
            System.out.println("COMMENTID: " + c.getCommentId() + "USER: " + c.getUser().getDisplayName());
            for (Comment reply : c.getReplies()) {
                System.out.println("COMMENTID: " + reply.getCommentId() + "USER: " + reply.getUser().getDisplayName());
            }
        }
        return cmts;
    }
}
